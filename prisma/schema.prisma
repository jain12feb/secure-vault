generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String         @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  categories       Category[]
  accountPasswords Password[]
  notifications    Notification[]
  bio              String?

  role UserRole @default(USER)

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String? // Optional description of the category
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwords   Password[] // Relation to passwords stored under this category

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name]) // Ensure uniqueness per-user basis (each user can have their own categories with same names)
  @@index([userId]) // Index for faster queries by user
}

model Password {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String // A name or title for the password entry (e.g., "Gmail Account")
  username   String // Username or email associated with the account
  password   String // Encrypted password (store securely)
  url        String? // Optional URL of the website/app (e.g., "https://gmail.com")
  notes      String? // Optional additional notes about this password entry
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lastUsedAt DateTime? // Track when the password was last accessed by the user (useful for auditing/security)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, categoryId]) // Index for faster queries by user and category
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  type      String // e.g., "password_added", "password_updated"
  isRead      Boolean  @default(false) // New field to track read status
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster queries by user and category
}
